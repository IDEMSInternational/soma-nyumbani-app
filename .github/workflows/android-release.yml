# Create production builds for web, ios and android, and deploy to relevant providers
name: Build and Deploy Production
on:
  release:
    types: [published]
jobs:
  build_dist:
    name: Build Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
        # TODO - consider gradle/swift caches as well - https://github.com/actions/cache/blob/main/examples.md#java---gradle
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: npm run app:build
        # Store various folders as artifacts for use by other jobs (ignore node modules except those needed by capacitor)
      - name: Store Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: |
            .
            !/node_modules
            node_modules/@capacitor
  build_deploy_android:
    needs: [build_dist]
    name: Deploy to Play Store Internal Track
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: app
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          # use data stored in secretes to populate google-services.json
      # - name: Write Google Services Json
      #   run: echo $GOOGLE_SERVICES_JSON > android/app/google-services.json
      #   env:
      #     GOOGLE_SERVICES_JSON: ${{secrets.GOOGLE_SERVICES_JSON}}
      - name: Generate Android Build
        # create release app bundle (aab) and app assemble (apk)
        run: cd android && chmod +x ./gradlew && ./gradlew clean :app:bundleRelease :app:assembleRelease
      - name: Sign Android Bundle
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY_BASE64 }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
      - name: Upload to Google play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: international.idems.somanyumbani
          releaseFile: ${{ env.SIGNED_RELEASE_FILE}}
          track: internal
          #whatsNewDirectory: /distribution/whatsnew
  cleanup:
    # NOTE - this will only run if previous action successful, so either ensure passes, or move to cron job
    needs: [build_deploy_android]
    runs-on: ubuntu-latest
    name: Delete intermediary artifacts
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: app
          failOnError: false
